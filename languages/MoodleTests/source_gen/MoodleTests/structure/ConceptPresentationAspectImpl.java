package MoodleTests.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ExerciseWithSubname;
  private ConceptPresentation props_ExerciseWithTag;
  private ConceptPresentation props_Exercises;
  private ConceptPresentation props_MoodleTest;
  private ConceptPresentation props_MoodleTests;
  private ConceptPresentation props_QuizUser;
  private ConceptPresentation props_QuizUserFirstNameStartsWith;
  private ConceptPresentation props_QuizUserGroup;
  private ConceptPresentation props_QuizUserSecondNameStartsWith;
  private ConceptPresentation props_QuizUserWithUsername;
  private ConceptPresentation props_QuizUsers;
  private ConceptPresentation props_QuizUsersAnd;
  private ConceptPresentation props_QuizUsersOr;
  private ConceptPresentation props_Settings;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ExerciseWithSubname:
        if (props_ExerciseWithSubname == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ExerciseWithSubname");
          props_ExerciseWithSubname = cpb.create();
        }
        return props_ExerciseWithSubname;
      case LanguageConceptSwitch.ExerciseWithTag:
        if (props_ExerciseWithTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ExerciseWithTag");
          props_ExerciseWithTag = cpb.create();
        }
        return props_ExerciseWithTag;
      case LanguageConceptSwitch.Exercises:
        if (props_Exercises == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Exercises");
          props_Exercises = cpb.create();
        }
        return props_Exercises;
      case LanguageConceptSwitch.MoodleTest:
        if (props_MoodleTest == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("moodle test");
          props_MoodleTest = cpb.create();
        }
        return props_MoodleTest;
      case LanguageConceptSwitch.MoodleTests:
        if (props_MoodleTests == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MoodleTests");
          props_MoodleTests = cpb.create();
        }
        return props_MoodleTests;
      case LanguageConceptSwitch.QuizUser:
        if (props_QuizUser == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_QuizUser = cpb.create();
        }
        return props_QuizUser;
      case LanguageConceptSwitch.QuizUserFirstNameStartsWith:
        if (props_QuizUserFirstNameStartsWith == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("first name starts from");
          props_QuizUserFirstNameStartsWith = cpb.create();
        }
        return props_QuizUserFirstNameStartsWith;
      case LanguageConceptSwitch.QuizUserGroup:
        if (props_QuizUserGroup == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_QuizUserGroup = cpb.create();
        }
        return props_QuizUserGroup;
      case LanguageConceptSwitch.QuizUserSecondNameStartsWith:
        if (props_QuizUserSecondNameStartsWith == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("second name starts from");
          props_QuizUserSecondNameStartsWith = cpb.create();
        }
        return props_QuizUserSecondNameStartsWith;
      case LanguageConceptSwitch.QuizUserWithUsername:
        if (props_QuizUserWithUsername == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_QuizUserWithUsername = cpb.create();
        }
        return props_QuizUserWithUsername;
      case LanguageConceptSwitch.QuizUsers:
        if (props_QuizUsers == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_QuizUsers = cpb.create();
        }
        return props_QuizUsers;
      case LanguageConceptSwitch.QuizUsersAnd:
        if (props_QuizUsersAnd == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("users separated by and");
          props_QuizUsersAnd = cpb.create();
        }
        return props_QuizUsersAnd;
      case LanguageConceptSwitch.QuizUsersOr:
        if (props_QuizUsersOr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("users separated by or");
          props_QuizUsersOr = cpb.create();
        }
        return props_QuizUsersOr;
      case LanguageConceptSwitch.Settings:
        if (props_Settings == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Settings");
          props_Settings = cpb.create();
        }
        return props_Settings;
    }
    return null;
  }
}
